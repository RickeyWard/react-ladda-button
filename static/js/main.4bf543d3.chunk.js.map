{"version":3,"sources":["App.tsx","../../src/index.tsx","index.tsx"],"names":["Component","CONTRACT","CONTRACT_OVERLAY","EXPAND_LEFT","EXPAND_RIGHT","EXPAND_UP","EXPAND_DOWN","SLIDE_LEFT","SLIDE_RIGHT","SLIDE_UP","SLIDE_DOWN","ZOOM_IN","ZOOM_OUT","LaddaButton","className","children","disabled","loading","progress","restProps","buttonRef","useRef","spinner","timer","useEffect","clearTimeout","height","parseFloat","window","spinnerColor","spinnerLines","radius","length","width","color","lines","animation","top","left","createSpinner","spin","tv","setTimeout","dloadingProp","ref","style","Math","ExLoadingLaddaButton","props","useState","setLoading","onClick","ExProgressLaddaButton","setProgress","inc","nv","p","random","withProgressHook","App","href","map","sv","key","data-color","data-style","zIndex","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4bf543d3.chunk.js","sourcesContent":["import 'react-ladda-button/dist/ladda.min.css';\nimport './bootstrap.min.css';\nimport React, { useState } from 'react';\nimport LaddaButton, { EXPAND_LEFT, EXPAND_RIGHT, EXPAND_UP, EXPAND_DOWN, CONTRACT, CONTRACT_OVERLAY, ZOOM_OUT, ZOOM_IN, SLIDE_LEFT, SLIDE_RIGHT, SLIDE_UP, SLIDE_DOWN } from 'react-ladda-button';\n\n\nconst withLoadingHook = <P extends object>(Component: React.ComponentType<P>): React.FC<P> =>\n  ({...props}:P) => {\n      const [loading, setLoading] = useState(false);    \n      return <Component {...props as P} loading={loading} onClick={()=>{\n        setLoading(true);\n        setTimeout(()=>{setLoading(false)},5000);\n      }} />;\n  };\n\nconst withProgressHook = <P extends object>(Component: React.ComponentType<P>): React.FC<P> =>\n  ({...props}:P) => {\n      const [progress, setProgress] = useState<number|null>(null);    \n      return <Component {...props as P} loading={!!progress} progress={progress} onClick={()=>{\n        setProgress(0.01);\n        const inc = () => {\n          setTimeout(() => {\n            let nv = 0;\n            setProgress((p:any)=>{\n              nv = p + 0.05;\n              return nv\n            });\n            if (nv < 1) inc(); else setTimeout(() => {\n              setProgress(null);\n            }, 75);\n          }, Math.random() * (500 - 100) + 100);\n        }\n        inc();\n      }} />;\n  };\n\nconst ExLoadingLaddaButton = withLoadingHook(LaddaButton);\nconst ExProgressLaddaButton = withProgressHook(LaddaButton);\n\nconst App = () => {\n  \n  return <article className=\"examples\">\n    <div className=\"intro\">\n      <h1>Ladda... but ported to react!</h1>\n      <p>\n        A UI concept which merges loading indicators into the action that invoked them. Primarily intended for use with forms where \n        it gives users immediate feedback upon submit rather than leaving them wondering while the browser does its thing. \n        Ladda is by <a href=\"http://hakim.se\">Hakim El Hattab</a> / <a href=\"https://twitter.com/hakimel\">@hakimel</a>.\n      </p>\n      <p>\n        This is <strong>not a wrapper</strong> but a port of ladda written in <i>typescript</i> with <i>hooks</i> for react 16.8+, this project is by <a href=\"http://diamonddrake.com/#/about\">Rickey Ward</a>.\n      </p>\n      <h2>To get started</h2>\n      <code>npm i react-ladda-button  |  yarn add react-ladda-button</code>\n      <p>include the CSS <small>themeless for custom button styles like use with bootstrap</small></p>\n      <code>import 'react-ladda-button/dist/ladda.min.css';  |  import 'react-ladda-button/dist/ladda.themeless.min.css';\n      </code>\n      <p>Import and get Ladda-ing</p>\n      <pre>\n        {\"import LaddaButton, { EXPAND_LEFT } from 'react-ladda-button\\n\\nconst MyComponent ()=> (\\n  <LaddaButton data-style={EXPAND_LEFT}>Submit</LaddaButton>\\n);\"}\n      </pre>\n    </div>\n    {([EXPAND_LEFT, EXPAND_RIGHT, EXPAND_UP, EXPAND_DOWN] as const).map((sv)=>(\n      <section key={sv}>\n        <h3>{sv}</h3>\n        <ExLoadingLaddaButton data-color=\"green\" data-style={sv}>Submit</ExLoadingLaddaButton>\n      </section>\n    ))}\n    {([CONTRACT, CONTRACT_OVERLAY, ZOOM_IN, ZOOM_OUT] as const).map((sv)=>(\n      <section key={sv}>\n        <h3>{sv}</h3>\n        <ExLoadingLaddaButton style={{zIndex: sv === CONTRACT_OVERLAY ? 10 : 'unset'}} data-color=\"red\" data-style={sv}>Submit</ExLoadingLaddaButton>\n      </section>\n    ))}\n    {([SLIDE_LEFT, SLIDE_RIGHT, SLIDE_UP, SLIDE_DOWN] as const).map((sv)=>(\n      <section key={sv}>\n        <h3>{sv}</h3>\n        <ExLoadingLaddaButton data-color=\"blue\" data-style={sv}>Submit</ExLoadingLaddaButton>\n      </section>\n    ))}\n    <h3>Built-in progress bar</h3>\n    <section>\n      <h3>{EXPAND_LEFT}</h3>\n      <ExProgressLaddaButton data-color=\"purple\" data-style={EXPAND_LEFT}>Submit</ExProgressLaddaButton>\n    </section>\n    <section>\n      <h3>{CONTRACT}</h3>\n      <ExProgressLaddaButton data-color=\"purple\" data-style={CONTRACT}>Submit</ExProgressLaddaButton>\n    </section>\n    <div className=\"intro mt-6r\">\n    <h2>Alternate Styles</h2>\n      <p>You can use ladda with custom styles super easy, just use the themless css import. I've had great success with tailwindcss and bootstrap</p>\n      <code>import 'react-ladda-button/dist/ladda.themeless.min.css'</code>\n      <p>Ladda works great with bootstrap! Using the themeless css along side standard boostrap classes</p>\n      <code>className=\"btn btn-primary\"</code>\n      <p>example:</p>\n      <pre>\n        {\"import LaddaButton, { EXPAND_LEFT } from 'react-ladda-button\\nimport 'react-ladda-button/dist/ladda.themeless.min.css\\n\\nconst MyComponent ()=> (\\n  <LaddaButton className=\\\"btn btn-primary btn-lg\\\" data-style={EXPAND_LEFT}>Submit</LaddaButton>\\n);\"}\n      </pre>\n      </div>\n      <div className=\"bootstrapfont\">\n        {([EXPAND_LEFT, EXPAND_RIGHT, EXPAND_UP, EXPAND_DOWN] as const).map((sv)=>(\n          <section key={`bootstrap-${sv}`}>\n            <h3>{sv}</h3>\n            <ExLoadingLaddaButton className=\"btn btn-success btn-lg\" data-style={sv}>Submit</ExLoadingLaddaButton>\n          </section>\n        ))}\n        {([CONTRACT, CONTRACT_OVERLAY, ZOOM_IN, ZOOM_OUT] as const).map((sv)=>(\n          <section key={`bootstrap-${sv}`}>\n            <h3>{sv}</h3>\n            <ExLoadingLaddaButton style={{zIndex: sv === CONTRACT_OVERLAY ? 10 : 'unset'}} className=\"btn btn-danger btn-lg\" data-style={sv}>Submit</ExLoadingLaddaButton>\n          </section>\n        ))}\n        {([SLIDE_LEFT, SLIDE_RIGHT, SLIDE_UP, SLIDE_DOWN] as const).map((sv)=>(\n          <section key={`bootstrap-${sv}`}>\n            <h3>{sv}</h3>\n            <ExLoadingLaddaButton className=\"btn btn-primary btn-lg\" data-style={sv}>Submit</ExLoadingLaddaButton>\n          </section>\n        ))}\n        <h3>Built-in progress bar</h3>\n        <section>\n          <h3>{EXPAND_LEFT}</h3>\n          <ExProgressLaddaButton className=\"btn btn-lg btn-info\" data-style={EXPAND_LEFT}>Submit</ExProgressLaddaButton>\n        </section>\n        <section>\n          <h3>{CONTRACT}</h3>\n          <ExProgressLaddaButton className=\"btn btn-lg btn-info\" data-style={CONTRACT}>Submit</ExProgressLaddaButton>\n        </section>\n      </div>\n  </article>\n}\n\nexport default App;\n","import React, { useEffect, useRef } from 'react';\nimport { Spinner } from 'spin.js';\n\nexport const XS = 'xs'\nexport const S = 's'\nexport const L = 'l'\nexport const XL = 'xl'\n\nexport const SIZES = [XS, S, L, XL] as const\n\nexport const CONTRACT = 'contract'\nexport const CONTRACT_OVERLAY = 'contract-overlay'\nexport const EXPAND_LEFT = 'expand-left'\nexport const EXPAND_RIGHT = 'expand-right'\nexport const EXPAND_UP = 'expand-up'\nexport const EXPAND_DOWN = 'expand-down'\nexport const SLIDE_LEFT = 'slide-left'\nexport const SLIDE_RIGHT = 'slide-right'\nexport const SLIDE_UP = 'slide-up'\nexport const SLIDE_DOWN = 'slide-down'\nexport const ZOOM_IN = 'zoom-in'\nexport const ZOOM_OUT = 'zoom-out'\n\nexport const STYLES = [\n  EXPAND_LEFT,\n  EXPAND_RIGHT,\n  EXPAND_UP,\n  EXPAND_DOWN,\n  CONTRACT,\n  CONTRACT_OVERLAY,\n  ZOOM_IN,\n  ZOOM_OUT,\n  SLIDE_LEFT,\n  SLIDE_RIGHT,\n  SLIDE_UP,\n  SLIDE_DOWN,\n] as const\n\nexport interface LaddaButtonProps {\n  className?: string;\n  progress?: number;\n  loading?: boolean;\n  disabled?: boolean;\n  'data-color'?: string;\n  'data-size'?: typeof SIZES[number];\n  'data-style'?: typeof STYLES[number];\n  'data-spinner-size'?: number;\n  'data-spinner-color'?: string;\n  'data-spinner-lines'?: number;\n}\n\nexport const LaddaButton: React.FC<LaddaButtonProps & React.ButtonHTMLAttributes<HTMLButtonElement>> = React.memo(\n  ({className, children, disabled, loading, progress, ...restProps}) => {\n  \n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const spinner = useRef<Spinner>();\n  const timer = useRef<any>();\n\n  useEffect(() => {\n    if(loading){\n      timer.current && clearTimeout(timer.current);\n      const createSpinner = () => {\n        var height = buttonRef.current ? buttonRef.current.offsetHeight : 0,\n            spinnerColor,\n            spinnerLines;\n    \n        if (height === 0) {\n            // We may have an element that is not visible so\n            // we attempt to get the height in a different way\n            if(buttonRef.current)\n              height = parseFloat(window.getComputedStyle(buttonRef.current).height);\n        }\n    \n        // If the button is tall we can afford some padding\n        if (height > 32) {\n            height *= 0.8;\n        }\n    \n        // Prefer an explicit height if one is defined\n        if (restProps[\"data-spinner-size\"]) {\n            height = restProps[\"data-spinner-size\"] || 10;\n        }\n    \n        // Allow buttons to specify the color of the spinner element\n        if (restProps['data-spinner-color']) {\n            spinnerColor = restProps['data-spinner-color'];\n        }\n    \n        // Allow buttons to specify the number of lines of the spinner\n        if (restProps['data-spinner-lines']) {\n            spinnerLines = restProps['data-spinner-lines'] || 12\n        }\n    \n        var radius = height * 0.2,\n            length = radius * 0.6,\n            width = radius < 7 ? 2 : 3;\n    \n        return new Spinner({\n            color: spinnerColor || '#fff',\n            lines: spinnerLines || 12,\n            radius: radius,\n            length: length,\n            width: width,\n            animation: 'ladda-spinner-line-fade',\n            top: 'auto',\n            left: 'auto',\n            className: ''\n        });\n      }\n\n      if(!spinner.current) spinner.current = createSpinner();\n        spinner.current?.spin(buttonRef.current?.querySelector('.ladda-spinner') as HTMLElement||undefined);\n    } else{\n      if (spinner) {\n        //make sure the spinner keeps spinning for the button contracting animation\n        const tv = timer.current = setTimeout(function() { spinner.current?.stop(); }, 1000);\n        return ()=>clearTimeout(tv);\n      }\n    }\n\n    //ts doesn't like sometimesy returns\n    return undefined;\n  }, [loading])\n\n  const dloadingProp = loading ? {'data-loading':''} : {};\n  restProps = {...restProps, 'data-style': restProps['data-style'] || EXPAND_LEFT}; //set default data-style\n\n  return (\n    <button\n      {...dloadingProp}\n      {...restProps}\n      className={`ladda-button ${className || ''}`}\n      ref={buttonRef}\n      disabled={disabled || loading}\n    >\n      <span className=\"ladda-label\">{children}</span>\n      <span className=\"ladda-spinner\"></span>\n      {progress &&\n        <div\n          className=\"ladda-progress\"\n          style={{width: ((Math.max(Math.min(progress||0, 1), 0)) * (buttonRef.current?.offsetWidth||0)) + 'px'}}>\n        </div>\n      }\n    </button>\n  )\n});\n\nexport default LaddaButton;","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}